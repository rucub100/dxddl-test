/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.hhu.bsinfo.dxddl.test;

import java.util.Arrays;

import de.hhu.bsinfo.dxmem.data.ChunkID;
import de.hhu.bsinfo.dxram.app.AbstractApplication;
import de.hhu.bsinfo.dxram.boot.BootService;
import de.hhu.bsinfo.dxram.chunk.ChunkLocalService;
import de.hhu.bsinfo.dxram.chunk.ChunkService;
import de.hhu.bsinfo.dxram.engine.DXRAMVersion;
import de.hhu.bsinfo.dxutils.NodeID;

public class App extends AbstractApplication {

    private static int COUNT = 1000000;
    private static boolean RESERVED = false;
    private static long[] RESERVED_CIDS = new long[COUNT];
    private static int[] SIZES = new int[COUNT];
    private static short NID;

    @Override
    public void main(String[] p_args) {
        BootService bootService = getService(BootService.class);
        NID = bootService.getNodeID();

        System.out.printf("\n");
        System.out.printf(
                "  Hello! I am %s running on node %s.\n",
                getApplicationName(),
                NodeID.toHexStringShort(bootService.getNodeID()));
        System.out.printf("  My arguments are: %s\n", Arrays.toString(p_args));
        System.out.printf("\n");

        // Put your application code running on the DXRAM node/peer here
        ChunkLocalService chunkLocalService = getService(ChunkLocalService.class);
        ChunkService chunkService = getService(ChunkService.class);
        boolean testDirectMem = Boolean.parseBoolean(p_args[0]);
        if (!RESERVED) {
            chunkLocalService.reserveLocal().reserve(COUNT);
            RESERVED = true;
        }

        for (int i = 0; i < COUNT; i++) {
            RESERVED_CIDS[i] = ChunkID.getChunkID(NID, i+1);
        }

        System.out.printf("  Run direct memory-access test: %b\n", testDirectMem);
        //System.out.printf("KV-Storage BEFORE LOAD:\n%s\n", chunkService.status().getStatus());
        if (testDirectMem) {
            testDirectMemoryAccess(chunkLocalService, chunkService);
        } else {
            testOldCreatePutGet(chunkLocalService, chunkService);
        }
        //System.out.printf("KV-Storage AFTER LOAD:\n%s\n", chunkService.status().getStatus());
        Stopwatch.GLOBAL.stop();
        System.out.println(Stopwatch.GLOBAL.history());
        Stopwatch.GLOBAL.reset();
    }

    private void testDirectMemoryAccess(
            final ChunkLocalService p_chunkLocalService,
            final ChunkService p_chunkService) {
        Stopwatch.GLOBAL.start();
        DirectVertex.init(p_chunkLocalService, p_chunkService);
        Stopwatch.GLOBAL.split("INIT");
        DirectVertex.createReserved(RESERVED_CIDS);
        Stopwatch.GLOBAL.split();
        // 10 million gets
        for (int c = 0; c < 10; c++) {
            for (int i = 0; i < COUNT; i++) {
                DirectVertex.getDepth(RESERVED_CIDS[i]);
            }            
        }
        Stopwatch.GLOBAL.split("GET");
    }

    private void testOldCreatePutGet(
            final ChunkLocalService p_chunkLocalService,
            final ChunkService p_chunkService) {
        Stopwatch.GLOBAL.start();
        Vertex tmp = new Vertex();
        //tmp.setNeighbors(new long[10]);
        for (int i = 0; i < COUNT; i++) {
            SIZES[i] = tmp.sizeofObject();
        }
        Stopwatch.GLOBAL.split("SIZES");
        p_chunkLocalService.createReservedLocal().create(RESERVED_CIDS, COUNT, SIZES);
        Stopwatch.GLOBAL.split("CREATE RESERVED LOCAL");
        for (int i = 0; i < COUNT; i++) {
            tmp = new Vertex();
            tmp.setID(RESERVED_CIDS[i]);
            p_chunkService.put().put(tmp);
        }
        Stopwatch.GLOBAL.split("PUT");
        for (int c = 0; c < 10; c++) {
            for (int i =  0; i < COUNT; i++) {
                Vertex tmp2 = new Vertex();
                tmp2.setID(RESERVED_CIDS[i]);
                p_chunkLocalService.getLocal().get(tmp2);
                tmp2.getDepth();
            }            
        }
        Stopwatch.GLOBAL.split("GET");
    }

    @Override
    public DXRAMVersion getBuiltAgainstVersion() {
        return DXRAMVersion.fromString("0.8.0-SNAPSHOT");
    }

    @Override
    public String getApplicationName() {
        return "DXDDL Tests";
    }

    @Override
    public void signalShutdown() {
        // Interrupt any flow of your application and make sure it shuts down.
        // Do not block here or wait for something to shut down. Shutting down of your application
        // must be execute asynchronously
    }
}
